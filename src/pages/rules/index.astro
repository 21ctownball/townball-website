---
import BackToTopButton from '@components/BackToTopButton.astro';
import Default from '@layouts/Default.astro';
import { getEntry } from 'astro:content';
const rules = await getEntry('general', 'rules');
const { headings, Content } = await rules.render();
const headingPartCount = 3;
const headingPartLength = Math.floor(headings.length / headingPartCount);
const headingParts = Array(headingPartCount)
  .fill(null)
  .map((_, i) => headings.slice(i * headingPartLength, (i + 1) * headingPartLength));
---

<Default title="Rules">
  <div class="wrapper">
    <div class="global-px">
      <!-- ensure rules are quickly accessible -->
      <h2>Contents</h2>
      <ol class="table-of-contents">
        {
          headingParts.map((part, i) => (
            <div>
              {part.map((h, j) => (
                <li>
                  <a href={`#${h.slug}`}>
                    <span>{i * headingPartLength + j + 1}</span>
                    <div />
                    <span>{h.text}</span>
                  </a>
                </li>
              ))}
            </div>
          ))
        }
      </ol>
      <!-- visual separation -->
      <hr />
      <!-- content populated from markdown file -->
      <Content />
      <!-- back to top button -->
      <BackToTopButton />
    </div>
  </div>
</Default>

<style lang="scss">
  @mixin width-medium {
    @media (max-width: 1200px) {
      @content;
    }
  }

  @mixin width-small {
    @media (max-width: 950px) {
      @content;
    }
  }

  @mixin width-smaller {
    @media (max-width: 800px) {
      @content;
    }
  }

  /* this overrides defaults to allow cool oversized numbers */
  :global(main) {
    max-width: unset !important;
  }

  /* the wrapper ensures that the oversized numbers are don't cause overflow when screen is small */
  .wrapper {
    --padding: calc(100vw / 2 - var(--content-width) / 2);
    padding: 0 var(--padding);
    contain: paint;

    .global-px {
      max-width: var(--content-width);
    }
  }

  :global(h3) {
    --number-size: 400px;
    --top-offset: -100px;
    --right-offset: -250px;
    --left-offset: -250px;
    margin-top: var(--sp-2);
    position: relative;

    &::before {
      position: absolute;
      color: var(--red);
      font-family: 'Bevan', serif;
      font-size: var(--number-size);
      opacity: 10%;
      line-height: 1;
      pointer-events: none;
    }

    &:nth-of-type(odd)::before {
      top: var(--top-offset);
      left: var(--left-offset);
    }

    &:nth-of-type(even)::before {
      top: var(--top-offset);
      right: var(--right-offset);
    }

    @for $i from 1 through 21 {
      &:nth-of-type(#{$i})::before {
        content: '#{$i}.';
      }
    }

    @include width-medium {
      --number-size: 300px;
      --right-offset: -200px;
      --left-offset: -200px;
    }

    @include width-small {
      --number-size: 250px;
      --right-offset: -50px;
      --left-offset: -50px;
    }
  }

  h2 {
    text-transform: uppercase;
    font-size: calc(var(--font-size-header) / 2);
  }

  ol {
    padding-left: 0;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--sp-2);

    @media (max-width: 700px) {
      grid-template-columns: 1fr;
      gap: 0;
    }

    li {
      list-style: none;

      a {
        color: var(--fg-bold);
        text-decoration: none;
        display: flex;
        justify-content: space-between;
        align-items: end;
        flex-direction: row-reverse;
        position: relative;
        gap: 0.2em;
        outline: none;

        &:is(:hover, :focus, :active) {
          color: var(--red-bold);
        }

        div {
          flex-grow: 1;
          border-bottom: 2px dotted var(--fg-mild);
          translate: 0 -0.4em;
        }
      }
    }
  }

  hr {
    margin: var(--sp-4) 0;
  }

  :global(ol:not(.table-of-contents)) {
    padding-left: 0;

    &:not(:last-child) {
      margin-bottom: var(--sp-4);
    }

    :global(li) {
      list-style-position: inside;
      margin-bottom: var(--sp-1);
      text-align: justify;
    }
  }
</style>
