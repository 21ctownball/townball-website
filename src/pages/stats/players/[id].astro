---
import Default from '@layouts/Default.astro';
import { getGames } from '@scripts/data/games';
import { getBatterStats, getPitcherStats, getPlayers } from '@scripts/data/players';
import { getFormattedDatetime } from '@scripts/utils';

// Create page for each player
export async function getStaticPaths() {
	const players = await getPlayers();
	return players.map(player => ({
		params: {
			id: player.id,
		},
		props: player,
	}));
}

// Extract route params
const player = Astro.props;

// Fetch data
const games = await getGames();

const totalGamesBatted = games.filter(game => game.atBats.some(atBat => atBat.batter === player.id));

const totalGamesPitched = games.filter(game => game.atBats.some(atBat => atBat.pitcher === player.id));

const gamesBattedPerYear = totalGamesBatted.reduce((acc, game) => {
	const year = game.year;
	if (!acc[year]) {
		acc[year] = [];
	}
	acc[year].push(game);
	return acc;
}, {} as Record<string, typeof totalGamesBatted>);

const gamesPitchedPerYear = totalGamesPitched.reduce((acc, game) => {
	const year = game.year;
	if (!acc[year]) {
		acc[year] = [];
	}
	acc[year].push(game);
	return acc;
}, {} as Record<string, typeof totalGamesPitched>);

const yearlyBatterStats = Object.keys(gamesBattedPerYear).reduce((acc, year) => {
	const games = gamesBattedPerYear[year];
	acc[year] = getBatterStats(player.id, games);
	return acc;
}, {} as Record<string, Record<string, string>>);

const totalBatterStats = getBatterStats(player.id, games);

const yearlyPitcherStats = Object.keys(gamesPitchedPerYear).reduce((acc, year) => {
	const games = gamesPitchedPerYear[year];
	acc[year] = getPitcherStats(player.id, games);
	return acc;
}, {} as Record<string, Record<string, string>>);

const totalPitcherStats = getPitcherStats(player.id, games);
---

<Default title={`Statistics | ${player.first_name} ${player.last_name}`}>
	<div class="header">
		<h1>
			<span title="First Name">{player.first_name}</span>
			<span title="Last Name">{player.last_name}</span>
		</h1>
		<p>
			<ul>
				<li>Debut: {player.debut.toLocaleString(undefined, getFormattedDatetime.options)}</li>
			</ul>
		</p>
		<hr class="stats">
	</div>
	<h2 class="margin-left">Batter / Runner</h2>
	<div class="table-container">
		<table class="stats">
			<tbody>
				<thead>
					<tr>
						<th>Year</th>
						{
							Object.keys(Object.values(yearlyBatterStats)[0]).map(key => <th>{key}</th>)
						}
					</tr>
				</thead>
				<tbody>
					{
						Object.keys(yearlyBatterStats).map(year => (
							<tr>
								<td>{year}</td>
								{
									Object.values(yearlyBatterStats[year]).map(value => <td>{value}</td>)
								}
							</tr>
						))
					}
					<tr>
						<td>Total</td>
						{
							Object.values(totalBatterStats).map(value => <td>{value}</td>)
						}
					</tr>
				</tbody>
			</tbody>
		</table>
	</div>
	<h2 class="margin-left">Pitcher</h2>
	<div class="table-container">
		<table class="stats">
			<tbody>
				<thead>
					<tr>
						<th>Year</th>
						{
							Object.keys(Object.values(yearlyPitcherStats)[0]).map(key => <th>{key}</th>)
						}
					</tr>
				</thead>
				<tbody>
					{
						Object.keys(yearlyPitcherStats).map(year => (
							<tr>
								<td>{year}</td>
								{
									Object.values(yearlyPitcherStats[year]).map(value => <td>{value}</td>)
								}
							</tr>
						))
					}
					<tr>
						<td>Total</td>
						{
							Object.values(totalPitcherStats).map(value => <td>{value}</td>)
						}
					</tr>
				</tbody>
			</tbody>
		</table>
	</div>
</Default>


<style lang="scss" is:global>
	main {
		max-width: unset;
	}
	
	.header {
		margin: auto;
		max-width: var(--content-width);
	}

	.margin-left {
		margin-left: var(--sp-2);
	}
	
	.table-container {
		overflow-x: scroll;
	
		table {
			--margin-x: var(--sp-1);
			margin-left: var(--margin-x);
			margin-right: var(--margin-x);
	
			@media (min-width: 576px) {
				--margin-x: var(--sp-2);
			}
		}
	}
	
	th, td {
		white-space: nowrap;
	}
	
	td {
		background-color: #fff8;
		padding: 0.5em;
	}
</style>