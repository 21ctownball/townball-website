---
import Default from '@layouts/Default.astro';
import { getGameFilePaths, getPlayers, getTeamId, loadGame } from '@scripts/data';
import { gameSchema } from '@scripts/schemas';
import { convertDateStringToIso, getFormattedDatetime } from '@scripts/utils';

// Create page for each game
export function getStaticPaths() {
	const gameScoreboardFiles = getGameFilePaths();
	return gameScoreboardFiles.map(data => ({
		params: data,
		props: data,
	}));
}

// Extract route params
const gameMetadata = Astro.props;

// Fetch data
const game = await loadGame(gameMetadata);
const players = await getPlayers();

// Replace GUIDs with team and player names
const teamMap = {
	[getTeamId(game.homeTeam)]: game.homeTeam,
	[getTeamId(game.visitingTeam)]: game.visitingTeam,
};
const playerMap = game.atBats.flatMap(row => [row.batter, row.pitcher, row.fielder, row.assist]).reduce((acc, player) => {
	if (player && !acc[player]) {
		// This will throw if player is not found
		acc[player] = players.find(p => p.id === player)!;
	}
	return acc;
}, {} as Record<number, typeof players[number]>);

// Columns that are not GUIDs
const rawColumns = Object.keys(gameSchema.element.shape).filter(key => key !== 'batting_team' && key !== 'pitching_team' && key !== 'batter' && key !== 'pitcher' && key !== 'fielder' && key !== 'assist');

// Create header
const homeTeamAcronym = game.homeTeam.acronym;
const visitingTeamAcronym = game.visitingTeam.acronym;
const header = `${getFormattedDatetime(game.date)}: ${visitingTeamAcronym} v ${homeTeamAcronym}`;
---

<Default title={`Statistics | Games | ${convertDateStringToIso(game.date)} ${visitingTeamAcronym} v ${homeTeamAcronym}`}>
	<div class="header">
		<h1>{header}</h1>
		<hr class="stats">
	</div>
	<div class="table-container">
		{
			<table class="stats">
				<thead>
					<tr>
						<th title={gameSchema.element.shape.batting_team.description}>Batting Team</th>
						<th title={gameSchema.element.shape.pitching_team.description}>Pitching Team</th>
						<th title={gameSchema.element.shape.batter.description}>Batter</th>
						<th title={gameSchema.element.shape.pitcher.description}>Pitcher</th>
						<th title={gameSchema.element.shape.fielder.description}>Fielder</th>
						<th title={gameSchema.element.shape.assist.description}>Assist</th>
						{rawColumns.map(col => (
							<th title={gameSchema.element.shape[col as keyof typeof gameSchema.element.shape].description}>{col}</th>
						))}
					</tr>
				</thead>
				<tbody>
					{game.atBats.map(atBat => (
						<tr>
							<td>
								<a href={`/stats/teams/${atBat.batting_team}`}>{teamMap[atBat.batting_team].acronym}</a>
							</td>
							<td>
								<a href={`/stats/teams/${atBat.pitching_team}`}>{teamMap[atBat.pitching_team].acronym}</a>
							</td>
							<td>
								<a href={`/stats/players/${atBat.batter}`}>{playerMap[atBat.batter].first_name} {playerMap[atBat.batter].last_name}</a>
							</td>
							<td>
								<a href={`/stats/players/${atBat.pitcher}`}>{playerMap[atBat.pitcher].first_name} {playerMap[atBat.pitcher].last_name}</a>
							</td>
							<td>
								{atBat.fielder && <a href={`/stats/players/${atBat.fielder}`}>{playerMap[atBat.fielder].first_name} {playerMap[atBat.fielder].last_name}</a>}
							</td>
							<td>
								{atBat.assist && <a href={`/stats/players/${atBat.assist}`}>{playerMap[atBat.assist].first_name} {playerMap[atBat.assist].last_name}</a>}
							</td>
							{rawColumns.map((col) => (
								<td>{atBat[col as keyof typeof atBat]?.toString() || 'null'}</td>
							))}
						</tr>
					))}
				</tbody>
			</table>
		}
	</div>
</Default>

<style lang="scss" is:global>
main {
	max-width: unset;
}

.header {
	margin: auto;
	max-width: var(--content-width);
}

.table-container {
	overflow-x: scroll;

	table {
		--margin-x: var(--sp-1);
		margin-left: var(--margin-x);
		margin-right: var(--margin-x);

		@media (min-width: 576px) {
			--margin-x: var(--sp-2);
		}
	}
}

td {
	background-color: #fff8;
	white-space: nowrap;
	padding: 0.5em;
}
</style>